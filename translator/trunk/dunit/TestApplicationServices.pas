unit TestApplicationServices;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Classes, TransIntf, SysUtils, ApplicationServices, MainFrm;
type
  // Test methods for class TApplicationServices
  
  TestTApplicationServices = class(TTestCase)
  strict private
    FApplicationServices: TApplicationServices;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestBeginUpdate;
    procedure TestEndUpdate;
    procedure TestGetAppHandle;
    procedure TestGetMainFormHandle;
    procedure TestGetAppOption;
    procedure TestGetSelectedItem;
    procedure TestSetSelectedItem;
    procedure TestGetDictionaryItems;
    procedure TestGetFooter;
    procedure TestGetHeader;
    procedure TestGetItems;
    procedure TestGetOrphans;
    procedure TestRegisterNotify;
    procedure TestSetAppOption;
    procedure TestSetFooter;
    procedure TestSetHeader;
    procedure TestTranslate;
    procedure TestUnRegisterNotify;
  end;

implementation

procedure TestTApplicationServices.SetUp;
begin
  FApplicationServices := TApplicationServices.Create(nil);
end;

procedure TestTApplicationServices.TearDown;
begin
  FApplicationServices.Free;
  FApplicationServices := nil;
end;

procedure TestTApplicationServices.TestBeginUpdate;
var
  ReturnValue: Integer;
begin
  ReturnValue := FApplicationServices.BeginUpdate;
  // TODO: Validate method results
  CheckEquals(1,ReturnValue,'');
end;

procedure TestTApplicationServices.TestEndUpdate;
var
  ReturnValue: Integer;
begin
  ReturnValue := FApplicationServices.EndUpdate;
  // TODO: Validate method results
  CheckEquals(0, ReturnValue,'');
end;

procedure TestTApplicationServices.TestGetAppHandle;
var
  ReturnValue: Cardinal;
begin
  ReturnValue := FApplicationServices.GetAppHandle;
  // TODO: Validate method results
end;

procedure TestTApplicationServices.TestGetMainFormHandle;
var
  ReturnValue: Cardinal;
begin
  ReturnValue := FApplicationServices.GetMainFormHandle;
  // TODO: Validate method results
end;

procedure TestTApplicationServices.TestGetAppOption;
var
  ReturnValue: WideString;
  Default: WideString;
  Name: WideString;
  Section: WideString;
begin
  // TODO: Setup method call parameters
  ReturnValue := FApplicationServices.GetAppOption(Section, Name, Default);
  // TODO: Validate method results
end;

procedure TestTApplicationServices.TestGetSelectedItem;
var
  ReturnValue: ITranslationItem;
begin
  ReturnValue := FApplicationServices.GetSelectedItem;
  // TODO: Validate method results
end;

procedure TestTApplicationServices.TestSetSelectedItem;
var
  Value: ITranslationItem;
begin
  // TODO: Setup method call parameters
  FApplicationServices.SetSelectedItem(Value);
  // TODO: Validate method results
end;

procedure TestTApplicationServices.TestGetDictionaryItems;
var
  ReturnValue: IDictionaryItems;
begin
  ReturnValue := FApplicationServices.GetDictionaryItems;
  // TODO: Validate method results
end;

procedure TestTApplicationServices.TestGetFooter;
var
  ReturnValue: WideString;
begin
  ReturnValue := FApplicationServices.GetFooter;
  // TODO: Validate method results
end;

procedure TestTApplicationServices.TestGetHeader;
var
  ReturnValue: WideString;
begin
  ReturnValue := FApplicationServices.GetHeader;
  // TODO: Validate method results
end;

procedure TestTApplicationServices.TestGetItems;
var
  ReturnValue: ITranslationItems;
begin
  ReturnValue := FApplicationServices.GetItems;
  // TODO: Validate method results
end;

procedure TestTApplicationServices.TestGetOrphans;
var
  ReturnValue: ITranslationItems;
begin
  ReturnValue := FApplicationServices.GetOrphans;
  // TODO: Validate method results
end;

procedure TestTApplicationServices.TestRegisterNotify;
var
  ANotify: INotify;
begin
  // TODO: Setup method call parameters
  FApplicationServices.RegisterNotify(ANotify);
  // TODO: Validate method results
end;

procedure TestTApplicationServices.TestSetAppOption;
var
  Value: WideString;
  Name: WideString;
  Section: WideString;
begin
  // TODO: Setup method call parameters
  FApplicationServices.SetAppOption(Section, Name, Value);
  // TODO: Validate method results
end;

procedure TestTApplicationServices.TestSetFooter;
var
  Value: WideString;
begin
  // TODO: Setup method call parameters
  FApplicationServices.SetFooter(Value);
  // TODO: Validate method results
end;

procedure TestTApplicationServices.TestSetHeader;
var
  Value: WideString;
begin
  // TODO: Setup method call parameters
  FApplicationServices.SetHeader(Value);
  // TODO: Validate method results
end;

procedure TestTApplicationServices.TestTranslate;
var
  ReturnValue: WideString;
  Value: WideString;
  Name: WideString;
  Section: WideString;
begin
  // TODO: Setup method call parameters
  ReturnValue := FApplicationServices.Translate(Section, Name, Value);
  // TODO: Validate method results
end;

procedure TestTApplicationServices.TestUnRegisterNotify;
var
  ANotify: INotify;
begin
  // TODO: Setup method call parameters
  FApplicationServices.UnRegisterNotify(ANotify);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTApplicationServices.Suite);
end.

